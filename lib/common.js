"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchPrivateStoriesFromPublicProject = fetchPrivateStoriesFromPublicProject;
exports.commentAboutSyncedState = commentAboutSyncedState;
exports.getStoryUrl = getStoryUrl;

var _api = _interopRequireDefault(require("./api"));

var _assert = _interopRequireDefault(require("assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function fetchPrivateStoriesFromPublicProject(publicProjectId) {
  const publicStoriesResponse = await _api.default.stories(publicProjectId, {
    filter: 'Pivotal Only'
  });
  (0, _assert.default)(publicStoriesResponse.ok, `Cannot fetch public stories: ${JSON.stringify(publicStoriesResponse.response)}`);
  return publicStoriesResponse.response.filter(story => story.name.match(/Pivotal Only/)).map(story => ({
    id: story.id,
    state: story.current_state,
    url: story.url,
    privateId: parsePrivateId(story)
  })).filter(story => story.privateId);
}

function parsePrivateId(story) {
  const tokens = story.name.match(/#(\d+)/);

  if (!tokens) {
    return console.error(`Invalid story name: ${story.name}`);
  }

  return Number(tokens[1]);
}

async function commentAboutSyncedState(projectId, stories) {
  return await Promise.all(stories.map(story => _api.default.postComment(projectId, story.publicId, `*Tracker Governor* updated story state from ` + `**${story.currentState}** to **${story.actualState}** to match the private story #${story.privateId}. `)));
}

function getStoryUrl(id) {
  return `https://www.pivotaltracker.com/story/show/${id}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tb24uanMiXSwibmFtZXMiOlsiZmV0Y2hQcml2YXRlU3Rvcmllc0Zyb21QdWJsaWNQcm9qZWN0IiwicHVibGljUHJvamVjdElkIiwicHVibGljU3Rvcmllc1Jlc3BvbnNlIiwiYXBpIiwic3RvcmllcyIsImZpbHRlciIsIm9rIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlc3BvbnNlIiwic3RvcnkiLCJuYW1lIiwibWF0Y2giLCJtYXAiLCJpZCIsInN0YXRlIiwiY3VycmVudF9zdGF0ZSIsInVybCIsInByaXZhdGVJZCIsInBhcnNlUHJpdmF0ZUlkIiwidG9rZW5zIiwiY29uc29sZSIsImVycm9yIiwiTnVtYmVyIiwiY29tbWVudEFib3V0U3luY2VkU3RhdGUiLCJwcm9qZWN0SWQiLCJQcm9taXNlIiwiYWxsIiwicG9zdENvbW1lbnQiLCJwdWJsaWNJZCIsImN1cnJlbnRTdGF0ZSIsImFjdHVhbFN0YXRlIiwiZ2V0U3RvcnlVcmwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBOztBQUNBOzs7O0FBbUJPLGVBQWVBLG9DQUFmLENBQ0xDLGVBREssRUFFbUM7QUFDeEMsUUFBTUMscUJBR0wsR0FBRyxNQUFNQyxhQUFJQyxPQUFKLENBQVlILGVBQVosRUFBNkI7QUFDckNJLElBQUFBLE1BQU0sRUFBRTtBQUQ2QixHQUE3QixDQUhWO0FBT0EsdUJBQ0VILHFCQUFxQixDQUFDSSxFQUR4QixFQUVHLGdDQUErQkMsSUFBSSxDQUFDQyxTQUFMLENBQzlCTixxQkFBcUIsQ0FBQ08sUUFEUSxDQUU5QixFQUpKO0FBT0EsU0FBT1AscUJBQXFCLENBQUNPLFFBQXRCLENBQ0pKLE1BREksQ0FDR0ssS0FBSyxJQUFJQSxLQUFLLENBQUNDLElBQU4sQ0FBV0MsS0FBWCxDQUFpQixjQUFqQixDQURaLEVBRUpDLEdBRkksQ0FFQUgsS0FBSyxLQUFLO0FBQ2JJLElBQUFBLEVBQUUsRUFBRUosS0FBSyxDQUFDSSxFQURHO0FBRWJDLElBQUFBLEtBQUssRUFBRUwsS0FBSyxDQUFDTSxhQUZBO0FBR2JDLElBQUFBLEdBQUcsRUFBRVAsS0FBSyxDQUFDTyxHQUhFO0FBSWJDLElBQUFBLFNBQVMsRUFBRUMsY0FBYyxDQUFDVCxLQUFEO0FBSlosR0FBTCxDQUZMLEVBUUpMLE1BUkksQ0FRR0ssS0FBSyxJQUFJQSxLQUFLLENBQUNRLFNBUmxCLENBQVA7QUFTRDs7QUFFRCxTQUFTQyxjQUFULENBQXdCVCxLQUF4QixFQUF3QztBQUN0QyxRQUFNVSxNQUFNLEdBQUdWLEtBQUssQ0FBQ0MsSUFBTixDQUFXQyxLQUFYLENBQWlCLFFBQWpCLENBQWY7O0FBRUEsTUFBSSxDQUFDUSxNQUFMLEVBQWE7QUFDWCxXQUFPQyxPQUFPLENBQUNDLEtBQVIsQ0FBZSx1QkFBc0JaLEtBQUssQ0FBQ0MsSUFBSyxFQUFoRCxDQUFQO0FBQ0Q7O0FBRUQsU0FBT1ksTUFBTSxDQUFDSCxNQUFNLENBQUMsQ0FBRCxDQUFQLENBQWI7QUFDRDs7QUFFTSxlQUFlSSx1QkFBZixDQUNMQyxTQURLLEVBRUxyQixPQUZLLEVBR0w7QUFDQSxTQUFPLE1BQU1zQixPQUFPLENBQUNDLEdBQVIsQ0FDWHZCLE9BQU8sQ0FBQ1MsR0FBUixDQUFZSCxLQUFLLElBQ2ZQLGFBQUl5QixXQUFKLENBQ0VILFNBREYsRUFFRWYsS0FBSyxDQUFDbUIsUUFGUixFQUdHLDhDQUFELEdBQ0csS0FBSW5CLEtBQUssQ0FBQ29CLFlBQWEsV0FBVXBCLEtBQUssQ0FBQ3FCLFdBQVksa0NBQWlDckIsS0FBSyxDQUFDUSxTQUFVLElBSnpHLENBREYsQ0FEVyxDQUFiO0FBVUQ7O0FBRU0sU0FBU2MsV0FBVCxDQUFxQmxCLEVBQXJCLEVBQWlDO0FBQ3RDLFNBQVEsNkNBQTRDQSxFQUFHLEVBQXZEO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFN0b3J5LCBTdG9yeVN0YXRlIH0gZnJvbSAnLi9hcGknXG5pbXBvcnQgYXBpIGZyb20gJy4vYXBpJ1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnXG5cbmV4cG9ydCB0eXBlIFN0b3J5QWdncmVnYXRlZCA9IHt8XG4gIHB1YmxpY0lkOiBudW1iZXIsXG4gIHByaXZhdGVJZDogbnVtYmVyLFxuICBuYW1lOiBzdHJpbmcsXG4gIGN1cnJlbnRTdGF0ZTogU3RvcnlTdGF0ZSxcbiAgYWN0dWFsU3RhdGU6IFN0b3J5U3RhdGUsXG4gIHB1YmxpY1VybDogc3RyaW5nLFxuICBwcml2YXRlVXJsOiBzdHJpbmcsXG58fVxuXG5leHBvcnQgdHlwZSBQcml2YXRlU3RvcnlJblB1YmxpY1Byb2plY3QgPSB7fFxuICBpZDogbnVtYmVyLFxuICBwcml2YXRlSWQ6IG51bWJlcixcbiAgc3RhdGU6IFN0b3J5U3RhdGUsXG4gIHVybDogc3RyaW5nLFxufH1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoUHJpdmF0ZVN0b3JpZXNGcm9tUHVibGljUHJvamVjdChcbiAgcHVibGljUHJvamVjdElkOiBudW1iZXJcbik6IFByb21pc2U8UHJpdmF0ZVN0b3J5SW5QdWJsaWNQcm9qZWN0W10+IHtcbiAgY29uc3QgcHVibGljU3Rvcmllc1Jlc3BvbnNlOiB7XG4gICAgb2s6IGJvb2xlYW4sXG4gICAgcmVzcG9uc2U6IFN0b3J5W10sXG4gIH0gPSBhd2FpdCBhcGkuc3RvcmllcyhwdWJsaWNQcm9qZWN0SWQsIHtcbiAgICBmaWx0ZXI6ICdQaXZvdGFsIE9ubHknLFxuICB9KVxuXG4gIGFzc2VydChcbiAgICBwdWJsaWNTdG9yaWVzUmVzcG9uc2Uub2ssXG4gICAgYENhbm5vdCBmZXRjaCBwdWJsaWMgc3RvcmllczogJHtKU09OLnN0cmluZ2lmeShcbiAgICAgIHB1YmxpY1N0b3JpZXNSZXNwb25zZS5yZXNwb25zZVxuICAgICl9YFxuICApXG5cbiAgcmV0dXJuIHB1YmxpY1N0b3JpZXNSZXNwb25zZS5yZXNwb25zZVxuICAgIC5maWx0ZXIoc3RvcnkgPT4gc3RvcnkubmFtZS5tYXRjaCgvUGl2b3RhbCBPbmx5LykpXG4gICAgLm1hcChzdG9yeSA9PiAoe1xuICAgICAgaWQ6IHN0b3J5LmlkLFxuICAgICAgc3RhdGU6IHN0b3J5LmN1cnJlbnRfc3RhdGUsXG4gICAgICB1cmw6IHN0b3J5LnVybCxcbiAgICAgIHByaXZhdGVJZDogcGFyc2VQcml2YXRlSWQoc3RvcnkpLFxuICAgIH0pKVxuICAgIC5maWx0ZXIoc3RvcnkgPT4gc3RvcnkucHJpdmF0ZUlkKVxufVxuXG5mdW5jdGlvbiBwYXJzZVByaXZhdGVJZChzdG9yeSk6ID9udW1iZXIge1xuICBjb25zdCB0b2tlbnMgPSBzdG9yeS5uYW1lLm1hdGNoKC8jKFxcZCspLylcblxuICBpZiAoIXRva2Vucykge1xuICAgIHJldHVybiBjb25zb2xlLmVycm9yKGBJbnZhbGlkIHN0b3J5IG5hbWU6ICR7c3RvcnkubmFtZX1gKVxuICB9XG5cbiAgcmV0dXJuIE51bWJlcih0b2tlbnNbMV0pXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21tZW50QWJvdXRTeW5jZWRTdGF0ZShcbiAgcHJvamVjdElkOiBudW1iZXIsXG4gIHN0b3JpZXM6IFN0b3J5QWdncmVnYXRlZFtdXG4pIHtcbiAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKFxuICAgIHN0b3JpZXMubWFwKHN0b3J5ID0+XG4gICAgICBhcGkucG9zdENvbW1lbnQoXG4gICAgICAgIHByb2plY3RJZCxcbiAgICAgICAgc3RvcnkucHVibGljSWQsXG4gICAgICAgIGAqVHJhY2tlciBHb3Zlcm5vciogdXBkYXRlZCBzdG9yeSBzdGF0ZSBmcm9tIGAgK1xuICAgICAgICAgIGAqKiR7c3RvcnkuY3VycmVudFN0YXRlfSoqIHRvICoqJHtzdG9yeS5hY3R1YWxTdGF0ZX0qKiB0byBtYXRjaCB0aGUgcHJpdmF0ZSBzdG9yeSAjJHtzdG9yeS5wcml2YXRlSWR9LiBgXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdG9yeVVybChpZDogbnVtYmVyKSB7XG4gIHJldHVybiBgaHR0cHM6Ly93d3cucGl2b3RhbHRyYWNrZXIuY29tL3N0b3J5L3Nob3cvJHtpZH1gXG59XG4iXX0=